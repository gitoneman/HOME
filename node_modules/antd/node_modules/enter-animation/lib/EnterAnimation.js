'use strict';
Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

//import assign from 'object-assign';

var _react2 = _interopRequireDefault(_react);

var _EnterAnimationChild = require('./EnterAnimationChild');

var _EnterAnimationChild2 = _interopRequireDefault(_EnterAnimationChild);

var _EnterUtils = require('./EnterUtils');

var startAnimation = require('./StartAnimation');

var EnterAnimation = (function (_Component) {
  _inherits(EnterAnimation, _Component);

  function EnterAnimation(props) {
    var _this = this;

    _classCallCheck(this, EnterAnimation);

    _get(Object.getPrototypeOf(EnterAnimation.prototype), 'constructor', this).apply(this, arguments);

    this.keysToEnter = [];
    this.keysToLeave = [];

    //第一次进入，默认进场；
    var elementArr = (0, _EnterUtils.toArrayChildren)(this.props.children);

    elementArr.map(function (m) {
      if (!m || !m.key) {
        return;
      }
      _this.keysToEnter.push(m.key);
    });
    this.childWapArr = (0, _EnterUtils.deleteRepeatKeyArr)(elementArr);
    this.state = {
      childWapArr: this.childWapArr
    };
  }

  _createClass(EnterAnimation, [{
    key: 'setData',
    value: function setData(props, wap) {
      this.setState({
        enter: props.enter,
        leave: props.leave,
        childWapArr: wap
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      //添加出场时的position: absolute;
      //if (this.keysToEnter.length) {
      //  this.keysToLeave.map((key)=> {
      //    this.state.childWapArr.map((m)=> {
      //      if (key == m.key) {
      //        m.props.style = {position: "absolute"};
      //        console.log(m)
      //      }
      //    })
      //  })
      //}

      this.childWapArr = (0, _EnterUtils.deleteRepeatKeyArr)((0, _EnterUtils.toArrayChildren)(this.props.children));
      this.keysToLeave = [];
      this.keysToEnter = [];
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var newChildrenArr = (0, _EnterUtils.deleteRepeatKeyArr)((0, _EnterUtils.toArrayChildren)(nextProps.children));
      var currentChildWapArr = this.childWapArr;

      var leaveChildArr = [];
      //增加absolute,所以把进场的也放数组里。。
      var enterChildArr = [];

      this.keysToLeave = [];
      this.keysToEnter = [];
      //判断两Arr里的不同；
      (0, _EnterUtils.contrastArr)(currentChildWapArr, newChildrenArr, function (cm) {
        if (cm.key) {
          _this2.keysToEnter.push(cm.key);
          enterChildArr.push(cm);
          //newChildrenArr.splice(newChildrenArr.indexOf(cm), 1);//清掉进场的；
        }
      });
      //清掉进场；
      enterChildArr.map(function (cm) {
        newChildrenArr.splice(newChildrenArr.indexOf(cm), 1);
      });

      (0, _EnterUtils.contrastArr)(newChildrenArr, currentChildWapArr, function (cm) {
        if (cm.key) {
          leaveChildArr.push(cm);
          _this2.keysToLeave.push(cm.key);
          //newChildrenArr.splice(newChildrenArr.indexOf(cm), 1);//清掉出场的；
        }
      });

      //newChildrenArr = leaveChildArr.concat(newChildrenArr);

      ////清掉出场;
      //leaveChildArr.map((cm)=>{
      //  newChildrenArr.splice(newChildrenArr.indexOf(cm), 1);
      //});

      newChildrenArr = newChildrenArr.concat(leaveChildArr, enterChildArr);

      this.setData(nextProps, (0, _EnterUtils.deleteRepeatKeyArr)(newChildrenArr));
      return false;
    }
  }, {
    key: 'kill',
    value: function kill() {
      this.setData(this.props, this.childWapArr);
    }
  }, {
    key: 'start',
    value: function start(h) {
      //findDOMNode(this).style.height = h + 'px';
      //获取Enter的元素里的高。。
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var props = this.props;
      var childrenToRender = this.state.childWapArr.map(function (m) {
        if (!m || !m.key) {
          return m;
        }
        var direction = _this3.keysToEnter.indexOf(m.key) >= 0 ? 'enter' : _this3.keysToLeave.indexOf(m.key) >= 0 ? 'leave' : null;
        var posBool = false;
        if (_this3.keysToEnter.length) {
          _this3.keysToLeave.map(function (key) {
            if (key === m.key) {
              posBool = true;
            }
          });
        }
        return _react2['default'].createElement(
          _EnterAnimationChild2['default'],
          {
            key: m.key,
            ref: m.key,
            direction: direction,
            enter: props.enter,
            leave: props.leave,
            position: posBool,
            callback: _this3.kill.bind(_this3),
            onStart: _this3.start.bind(_this3) },
          m
        );
      });
      //去重复和null
      childrenToRender = (0, _EnterUtils.deleteRepeatKeyArr)(childrenToRender);
      return (0, _react.createElement)(props.component, props, childrenToRender);
    }
  }]);

  return EnterAnimation;
})(_react.Component);

EnterAnimation.to = startAnimation;
EnterAnimation.propTypes = {
  component: _react2['default'].PropTypes.string
};
EnterAnimation.defaultProps = {
  component: 'div'
};

exports['default'] = EnterAnimation;
module.exports = exports['default'];