'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcTooltip = require('rc-tooltip');

var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

/*

 var MenuItem = Menu.Item;

 var menu = <Menu><MenuItem>1</MenuItem></Menu>;

 <DropDown trigger="click" animationName="" overlay={<>} onSelect={}>
 <button>open</button>
 </DropDown>
 */

var Dropdown = _react2['default'].createClass({
  displayName: 'Dropdown',

  propTypes: {
    minOverlayWidthMatchTrigger: _react2['default'].PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      minOverlayWidthMatchTrigger: true,
      prefixCls: 'rc-dropdown',
      defaultVisible: false,
      onVisibleChange: function onVisibleChange() {},
      placement: {
        points: ['tl', 'bl']
      }
    };
  },

  getInitialState: function getInitialState() {
    var props = this.props;
    if ('visible' in props) {
      return {
        visible: props.visible
      };
    }
    return {
      visible: props.defaultVisible
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(props) {
    if ('visible' in props) {
      this.setState({
        visible: props.visible
      });
    }
  },

  onClick: function onClick(e) {
    var props = this.props;
    var overlayProps = props.overlay.props;
    if (!('visible' in props)) {
      this.setState({
        visible: false
      });
    }
    if (overlayProps.onClick) {
      overlayProps.onClick(e);
    }
  },

  onVisibleChange: function onVisibleChange(v) {
    var props = this.props;
    if (!('visible' in props)) {
      this.setState({
        visible: v
      });
    }
    props.onVisibleChange(v);
  },

  getMenuElement: function getMenuElement() {
    var props = this.props;
    return _react2['default'].cloneElement(props.overlay, {
      prefixCls: props.prefixCls + '-menu',
      onClick: this.onClick
    });
  },

  render: function render() {
    return _react2['default'].createElement(_rcTooltip2['default'], _extends({}, this.props, {
      ref: 'tooltip',
      visible: this.state.visible,
      afterVisibleChange: this.afterVisibleChange,
      overlay: this.getMenuElement(),
      onVisibleChange: this.onVisibleChange
    }));
  },

  afterVisibleChange: function afterVisibleChange(visible) {
    if (visible && this.props.minOverlayWidthMatchTrigger) {
      var overlayNode = _react2['default'].findDOMNode(this.refs.tooltip.popupInstance);
      var rootNode = _react2['default'].findDOMNode(this);
      if (rootNode.offsetWidth > overlayNode.offsetWidth) {
        overlayNode.style.width = rootNode.offsetWidth + 'px';
      }
    }
  }
});

exports['default'] = Dropdown;
module.exports = exports['default'];