'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _util = require('./util');

var _rcMenu = require('rc-menu');

var _OptGroup = require('./OptGroup');

var _OptGroup2 = _interopRequireDefault(_OptGroup);

var _rcUtil = require('rc-util');

var _DropdownPanel = require('./DropdownPanel');

var _DropdownPanel2 = _interopRequireDefault(_DropdownPanel);

var _rcAlign = require('rc-align');

var _rcAlign2 = _interopRequireDefault(_rcAlign);

var _rcAnimate = require('rc-animate');

var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

var _DropdownInner = require('./DropdownInner');

var _DropdownInner2 = _interopRequireDefault(_DropdownInner);

function isBelow(align) {
  var points = align.points;
  if (points[0] === 'tl' && points[1] === 'bl') {
    return true;
  }
  return false;
}

var ALIGN = {
  points: ['tl', 'bl'],
  offset: [0, 4],
  overflow: {
    adjustX: 0,
    adjustY: 1
  }
};

var SelectDropdown = _react2['default'].createClass({
  displayName: 'SelectDropdown',

  propTypes: {
    filterOption: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.func]),
    visible: _react2['default'].PropTypes.bool,
    prefixCls: _react2['default'].PropTypes.string,
    children: _react2['default'].PropTypes.any
  },

  componentDidMount: function componentDidMount() {
    this.nativeDOMNode = _reactDom2['default'].findDOMNode(this);
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return this.props.visible || nextProps.visible;
  },

  onAlign: function onAlign(node, align) {
    var dropdownPrefixCls = this.getDropdownPrefixCls();
    var belowClassName = dropdownPrefixCls + '--below';
    var topClassName = dropdownPrefixCls + '--top';
    var className = node.className;
    var hasBelowClassName = className.indexOf(belowClassName);
    var isBelowAlign = isBelow(align);
    if (!isBelowAlign && hasBelowClassName) {
      node.className = node.className.replace(belowClassName, topClassName);
    }
  },

  getDropdownPrefixCls: function getDropdownPrefixCls() {
    return this.props.prefixCls + '-dropdown';
  },

  getMenuComponent: function getMenuComponent() {
    return this.refs.panel.refs.menu;
  },

  filterOption: function filterOption(input, child) {
    if (!input) {
      return true;
    }
    var filterOption = this.props.filterOption;
    if (!filterOption) {
      return true;
    }
    if (child.props.disabled) {
      return false;
    }
    return filterOption.call(this, input, child);
  },

  renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren(children, showNotFound) {
    var _this = this;

    var sel = [];
    var props = this.props;
    var inputValue = props.inputValue;
    var childrenKeys = [];
    var tags = props.tags;
    _react2['default'].Children.forEach(children, function (child) {
      if (child.type === _OptGroup2['default']) {
        var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
        if (innerItems.length) {
          var label = child.props.label;
          var key = child.key;
          if (!key && typeof label === 'string') {
            key = label;
          } else if (!label && key) {
            label = key;
          }
          sel.push(_react2['default'].createElement(
            _rcMenu.ItemGroup,
            { key: key, title: label },
            innerItems
          ));
        }
        return;
      }
      var childValue = (0, _util.getValuePropValue)(child);
      if (_this.filterOption(inputValue, child)) {
        sel.push(_react2['default'].createElement(_rcMenu.Item, _extends({
          value: childValue,
          key: childValue
        }, child.props)));
      }
      if (tags && !child.props.disabled) {
        childrenKeys.push(childValue);
      }
    });
    if (tags) {
      // tags value must be string
      var value = props.value;
      value = value.filter(function (singleValue) {
        return childrenKeys.indexOf(singleValue) === -1 && (!inputValue || singleValue.indexOf(inputValue) > -1);
      });
      sel = sel.concat(value.map(function (singleValue) {
        return _react2['default'].createElement(
          _rcMenu.Item,
          { value: singleValue, key: singleValue },
          singleValue
        );
      }));
      if (inputValue) {
        var notFindInputItem = sel.every(function (option) {
          return (0, _util.getValuePropValue)(option) !== inputValue;
        });
        if (notFindInputItem) {
          sel.unshift(_react2['default'].createElement(
            _rcMenu.Item,
            { value: inputValue, key: inputValue },
            inputValue
          ));
        }
      }
    }
    if (!sel.length && showNotFound && props.notFoundContent) {
      sel = [_react2['default'].createElement(
        _rcMenu.Item,
        { disabled: true, value: 'NOT_FOUND', key: 'NOT_FOUND' },
        props.notFoundContent
      )];
    }
    return sel;
  },

  renderFilterOptions: function renderFilterOptions() {
    return this.renderFilterOptionsFromChildren(this.props.children, true);
  },

  render: function render() {
    var _classSet;

    var props = this.props;
    var prefixCls = props.prefixCls;
    var dropdownPrefixCls = this.getDropdownPrefixCls();
    var menuItems = this.renderFilterOptions();
    var visible = props.visible;
    var search = props.isMultipleOrTagsOrCombobox || !props.showSearch ? null : _react2['default'].createElement(
      'span',
      { className: prefixCls + '-search ' + prefixCls + '-search--dropdown' },
      props.inputElement
    );
    if (!search && !menuItems.length) {
      visible = false;
    }
    var hiddenClassName = dropdownPrefixCls + '-hidden';
    var className = (0, _rcUtil.classSet)((_classSet = {}, _defineProperty(_classSet, dropdownPrefixCls, 1), _defineProperty(_classSet, dropdownPrefixCls + '--below', 1), _defineProperty(_classSet, props.className, !!props.className), _defineProperty(_classSet, dropdownPrefixCls + '--' + (props.isMultipleOrTags ? 'multiple' : 'single'), 1), _classSet));
    if (!visible && this.nativeDOMNode) {
      className = this.nativeDOMNode.className.replace(' ' + hiddenClassName, '');
    }
    // single and not combobox, input is inside dropdown
    return _react2['default'].createElement(
      _rcAnimate2['default'],
      {
        component: '',
        exclusive: true,
        transitionAppear: true,
        showProp: 'selectOpen',
        transitionName: props.transitionName },
      _react2['default'].createElement(
        _rcAlign2['default'],
        { target: props.getAlignTarget,
          key: 'dropdown',
          onAlign: this.onAlign,
          selectOpen: visible,
          childrenProps: {
            visible: 'selectOpen'
          },
          disabled: !visible,
          align: ALIGN },
        _react2['default'].createElement(
          _DropdownInner2['default'],
          {
            onDropdownFocus: props.onDropdownFocus,
            onDropdownBlur: props.onDropdownBlur,
            dropdownStyle: props.dropdownStyle,
            hiddenClassName: hiddenClassName,
            className: className },
          _react2['default'].createElement(_DropdownPanel2['default'], _extends({ ref: 'panel' }, props, { menuItems: menuItems, visible: visible, search: search }))
        )
      )
    );
  }
});

exports['default'] = SelectDropdown;
module.exports = exports['default'];