'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _util = require('./util');

var _rcMenu = require('rc-menu');

var _OptGroup = require('./OptGroup');

var _OptGroup2 = _interopRequireDefault(_OptGroup);

var _rcUtil = require('rc-util');

var _DropdownPanel = require('./DropdownPanel');

var _DropdownPanel2 = _interopRequireDefault(_DropdownPanel);

var _rcAlign = require('rc-align');

var _rcAlign2 = _interopRequireDefault(_rcAlign);

var _rcAnimate = require('rc-animate');

var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

var SelectDropdown = (function (_React$Component) {
  _inherits(SelectDropdown, _React$Component);

  function SelectDropdown() {
    _classCallCheck(this, SelectDropdown);

    _get(Object.getPrototypeOf(SelectDropdown.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SelectDropdown, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return this.props.visible || nextProps.visible;
    }
  }, {
    key: 'getDropdownPrefixCls',
    value: function getDropdownPrefixCls() {
      return this.props.prefixCls + '-dropdown';
    }
  }, {
    key: 'getMenuComponent',
    value: function getMenuComponent() {
      return this.refs.panel.refs.menu;
    }
  }, {
    key: 'renderFilterOptionsFromChildren',
    value: function renderFilterOptionsFromChildren(children, showNotFound) {
      var _this = this;

      var sel = [];
      var props = this.props;
      var inputValue = props.inputValue;
      var childrenKeys = [];
      var tags = props.tags;
      _react2['default'].Children.forEach(children, function (child) {
        if (child.type === _OptGroup2['default']) {
          var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
          if (innerItems.length) {
            var label = child.props.label;
            var key = child.key;
            if (!key && typeof label === 'string') {
              key = label;
            } else if (!label && key) {
              label = key;
            }
            sel.push(_react2['default'].createElement(
              _rcMenu.ItemGroup,
              { key: key, title: label },
              innerItems
            ));
          }
          return;
        }
        var childValue = (0, _util.getValuePropValue)(child);
        if (_this.filterOption(inputValue, child)) {
          sel.push(_react2['default'].createElement(_rcMenu.Item, _extends({
            value: childValue,
            key: childValue
          }, child.props)));
        }
        if (tags && !child.props.disabled) {
          childrenKeys.push(childValue);
        }
      });
      if (tags) {
        // tags value must be string
        var value = props.value;
        value = value.filter(function (v) {
          return childrenKeys.indexOf(v) === -1 && (!inputValue || v.indexOf(inputValue) > -1);
        });
        sel = sel.concat(value.map(function (v) {
          return _react2['default'].createElement(
            _rcMenu.Item,
            { value: v, key: v },
            v
          );
        }));
        if (inputValue) {
          var notFindInputItem = sel.every(function (s) {
            return (0, _util.getValuePropValue)(s) !== inputValue;
          });
          if (notFindInputItem) {
            sel.unshift(_react2['default'].createElement(
              _rcMenu.Item,
              { value: inputValue, key: inputValue },
              inputValue
            ));
          }
        }
      }
      if (!sel.length && showNotFound && props.notFoundContent) {
        sel = [_react2['default'].createElement(
          _rcMenu.Item,
          { disabled: true, value: 'NOT_FOUND', key: 'NOT_FOUND' },
          props.notFoundContent
        )];
      }
      return sel;
    }
  }, {
    key: 'renderFilterOptions',
    value: function renderFilterOptions() {
      return this.renderFilterOptionsFromChildren(this.props.children, true);
    }
  }, {
    key: 'render',
    value: function render() {
      var _className;

      var props = this.props;
      var prefixCls = props.prefixCls;
      var dropdownPrefixCls = this.getDropdownPrefixCls();
      var menuItems = this.renderFilterOptions();
      var visible = props.visible;
      var search = props.isMultipleOrTagsOrCombobox || !props.showSearch ? null : _react2['default'].createElement(
        'span',
        { className: prefixCls + '-search ' + prefixCls + '-search--dropdown' },
        props.inputElement
      );
      if (!search && !menuItems.length) {
        visible = false;
      }
      var className = (_className = {}, _defineProperty(_className, dropdownPrefixCls, 1), _defineProperty(_className, dropdownPrefixCls + '--below', 1), _defineProperty(_className, dropdownPrefixCls + '-hidden', !visible), _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, dropdownPrefixCls + '--' + (props.isMultipleOrTags ? 'multiple' : 'single'), 1), _className);
      // single and not combobox, input is inside dropdown
      return _react2['default'].createElement(
        _rcAnimate2['default'],
        {
          component: '',
          exclusive: true,
          transitionAppear: true,
          showProp: 'selectOpen',
          transitionName: props.transitionName },
        _react2['default'].createElement(
          _rcAlign2['default'],
          { target: props.getAlignTarget,
            key: 'dropdown',
            selectOpen: visible,
            disabled: !visible,
            align: { points: ['tl', 'bl'], offset: [0, 4] } },
          _react2['default'].createElement(
            'div',
            { key: 'dropdown',
              onFocus: props.onDropdownFocus,
              onBlur: props.onDropdownBlur,
              style: props.dropdownStyle,
              className: (0, _rcUtil.classSet)(className),
              tabIndex: '-1' },
            _react2['default'].createElement(_DropdownPanel2['default'], _extends({ ref: 'panel' }, props, { menuItems: menuItems, visible: visible, search: search }))
          )
        )
      );
    }
  }, {
    key: 'filterOption',
    value: function filterOption(input, child) {
      if (!input) {
        return true;
      }
      var filterOption = this.props.filterOption;
      if (!filterOption) {
        return true;
      }
      if (child.props.disabled) {
        return false;
      }
      return filterOption.call(this, input, child);
    }
  }]);

  return SelectDropdown;
})(_react2['default'].Component);

SelectDropdown.propTypes = {
  filterOption: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.func]),
  visible: _react2['default'].PropTypes.bool,
  prefixCls: _react2['default'].PropTypes.string,
  children: _react2['default'].PropTypes.any
};

exports['default'] = SelectDropdown;
module.exports = exports['default'];