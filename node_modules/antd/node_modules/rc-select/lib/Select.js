'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcUtil = require('rc-util');

var _OptGroup = require('./OptGroup');

var _OptGroup2 = _interopRequireDefault(_OptGroup);

var _Dropdown = require('./Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _util = require('./util');

function noop() {}

function filterFn(input, child) {
  return String((0, _util.getPropValue)(child, this.props.optionFilterProp)).indexOf(input) > -1;
}

function saveRef(name, component) {
  this[name] = component;
}

var Select = _react2['default'].createClass({
  displayName: 'Select',

  propTypes: {
    multiple: _react.PropTypes.bool,
    filterOption: _react.PropTypes.any,
    showSearch: _react.PropTypes.bool,
    disabled: _react.PropTypes.bool,
    showArrow: _react.PropTypes.bool,
    tags: _react.PropTypes.bool,
    transitionName: _react.PropTypes.string,
    optionLabelProp: _react.PropTypes.string,
    optionFilterProp: _react.PropTypes.string,
    animation: _react.PropTypes.string,
    onChange: _react.PropTypes.func,
    onSelect: _react.PropTypes.func,
    onSearch: _react.PropTypes.func,
    searchPlaceholder: _react.PropTypes.string,
    placeholder: _react.PropTypes.any,
    onDeselect: _react.PropTypes.func,
    value: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
    defaultValue: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
    label: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.any]),
    defaultLabel: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.any]),
    dropdownStyle: _react.PropTypes.object,
    maxTagTextLength: _react.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      prefixCls: 'rc-select',
      filterOption: filterFn,
      showSearch: true,
      allowClear: false,
      placeholder: '',
      searchPlaceholder: '',
      defaultValue: [],
      onChange: noop,
      onSelect: noop,
      onSearch: noop,
      onDeselect: noop,
      showArrow: true,
      dropdownMatchSelectWidth: true,
      dropdownStyle: {},
      dropdownMenuStyle: {},
      optionFilterProp: 'value',
      optionLabelProp: 'value',
      notFoundContent: 'Not Found'
    };
  },

  getInitialState: function getInitialState() {
    var props = this.props;
    var value = [];
    if ('value' in props) {
      value = (0, _util.toArray)(props.value);
    } else {
      value = (0, _util.toArray)(props.defaultValue);
    }
    var label = this.getLabelFromProps(props, value, 1);
    var inputValue = '';
    if (props.combobox) {
      inputValue = value[0] || '';
    }
    this.saveInputRef = saveRef.bind(this, 'inputInstance');
    this.saveDropdownRef = saveRef.bind(this, 'dropdownInstance');
    return { value: value, inputValue: inputValue, label: label };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if ('value' in nextProps) {
      var value = (0, _util.toArray)(nextProps.value);
      var label = this.getLabelFromProps(nextProps, value);
      this.setState({
        value: value,
        label: label
      });
      if (nextProps.combobox) {
        this.setState({
          inputValue: value[0] || ''
        });
      }
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var state = this.state;
    var props = this.props;
    if (this.haveOpened) {
      _react2['default'].render(this.getDropdownElement(), this.getDropdownContainer());
    }
    if (state.open) {
      if (props.dropdownMatchSelectWidth) {
        var dropdownDOMNode = this.getDropdownDOMNode();
        if (dropdownDOMNode) {
          dropdownDOMNode.style.width = this.getDOMNode().offsetWidth + 'px';
        }
      }
      if ((0, _util.isMultipleOrTags)(props)) {
        var inputNode = this.getInputDOMNode();
        if (inputNode.value) {
          inputNode.style.width = '';
          inputNode.style.width = inputNode.scrollWidth + 'px';
        } else {
          inputNode.style.width = '';
        }
      }
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.dropdownContainer) {
      _react2['default'].unmountComponentAtNode(this.dropdownContainer);
      document.body.removeChild(this.dropdownContainer);
      this.dropdownContainer = null;
    }
    this.dropdownInstance = null;
    if (this._blurTimer) {
      clearTimeout(this._blurTimer);
      this._blurTimer = null;
    }
  },

  onInputChange: function onInputChange(e) {
    var val = e.target.value;
    var props = this.props;
    this.setState({
      inputValue: val,
      open: true
    });
    if ((0, _util.isCombobox)(props)) {
      this.fireChange([val], [val]);
    }
    props.onSearch(val);
  },

  onClick: function onClick() {
    var props = this.props;
    if (!props.disabled) {
      if (this.state.open) {
        this.setOpenState(false);
      } else {
        this.openIfHasChildren();
        if ((0, _util.isMultipleOrTagsOrCombobox)(props)) {
          if (this.getInputDOMNode()) {
            this.getInputDOMNode().focus();
          }
        }
      }
    }
  },

  // combobox ignore
  onKeyDown: function onKeyDown(e) {
    var props = this.props;
    if (props.disabled) {
      return;
    }
    var keyCode = e.keyCode;
    if (this.state.open && !this.getInputDOMNode()) {
      this.onInputKeyDown(e);
    } else if (keyCode === _rcUtil.KeyCode.ENTER || keyCode === _rcUtil.KeyCode.DOWN) {
      this.onClick();
      e.preventDefault();
    }
  },

  onInputKeyDown: function onInputKeyDown(e) {
    var props = this.props;
    var state = this.state;
    var keyCode = e.keyCode;
    if ((0, _util.isMultipleOrTags)(props) && !e.target.value && keyCode === _rcUtil.KeyCode.BACKSPACE) {
      var value = state.value.concat();
      if (value.length) {
        var label = state.label.concat();
        var popValue = value.pop();
        label.pop();
        props.onDeselect(popValue);
        this.fireChange(value, label);
      }
      return;
    }

    if (keyCode === _rcUtil.KeyCode.DOWN) {
      if (!state.open) {
        this.openIfHasChildren();
        e.preventDefault();
        e.stopPropagation();
        return;
      }
    } else if (keyCode === _rcUtil.KeyCode.ESC) {
      if (state.open) {
        this.setOpenState(false);
        e.preventDefault();
        e.stopPropagation();
      }
      return;
    }

    if (state.open) {
      var menu = this.dropdownInstance && this.dropdownInstance.getMenuComponent();
      if (menu && menu.onKeyDown(e)) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
  },

  onMenuSelect: function onMenuSelect(_ref) {
    var item = _ref.item;

    var value = this.state.value;
    var label = this.state.label;
    var props = this.props;
    var selectedValue = (0, _util.getValuePropValue)(item);
    var selectedLabel = this.getLabelFromOption(item);
    props.onSelect(selectedValue, item);
    if ((0, _util.isMultipleOrTags)(props)) {
      if (value.indexOf(selectedValue) !== -1) {
        return;
      }
      value = value.concat([selectedValue]);
      label = label.concat([selectedLabel]);
    } else {
      if (value[0] === selectedValue) {
        this.setOpenState(false);
        return;
      }
      value = [selectedValue];
      label = [selectedLabel];
    }
    this.fireChange(value, label);
    this.setOpenState(false);
    this.setState({
      inputValue: ''
    });
    if ((0, _util.isCombobox)(props)) {
      this.setState({
        inputValue: (0, _util.getPropValue)(item, props.optionLabelProp)
      });
    }
  },

  onMenuDeselect: function onMenuDeselect(_ref2) {
    var item = _ref2.item;
    var domEvent = _ref2.domEvent;

    if (domEvent.type === 'click') {
      this.removeSelected((0, _util.getValuePropValue)(item));
    }
    this.setOpenState(false);
    this.setState({
      inputValue: ''
    });
  },

  onBlur: function onBlur() {
    var _this = this;

    if (this._blurTimer) {
      clearTimeout(this._blurTimer);
    }
    this._blurTimer = setTimeout(function () {
      _this.setState({
        open: false
      });
    }, 100);
  },

  onFocus: function onFocus() {
    if (this._blurTimer) {
      clearTimeout(this._blurTimer);
      this._blurTimer = null;
    }
  },

  onPlaceholderClick: function onPlaceholderClick() {
    this.getInputDOMNode().focus();
  },

  onClearSelection: function onClearSelection(e) {
    var props = this.props;
    var state = this.state;
    if (props.disabled) {
      return;
    }
    e.stopPropagation();
    if (state.inputValue || state.value.length) {
      this.fireChange([], []);
      this.setOpenState(false);
      this.setState({
        inputValue: ''
      });
    }
  },

  getLabelBySingleValue: function getLabelBySingleValue(children, value) {
    var _this2 = this;

    if (value === undefined) {
      return null;
    }
    var label = null;
    _react2['default'].Children.forEach(children, function (c) {
      if (c.type === _OptGroup2['default']) {
        var maybe = _this2.getLabelBySingleValue(c.props.children, value);
        if (maybe !== null) {
          label = maybe;
        }
      } else if ((0, _util.getValuePropValue)(c) === value) {
        label = _this2.getLabelFromOption(c);
      }
    });
    return label;
  },

  getLabelFromOption: function getLabelFromOption(c) {
    return (0, _util.getPropValue)(c, this.props.optionLabelProp);
  },

  getLabelFromProps: function getLabelFromProps(props, value, init) {
    var label = [];
    if ('label' in props) {
      label = (0, _util.toArray)(props.label);
    } else if (init && 'defaultLabel' in props) {
      label = (0, _util.toArray)(props.defaultLabel);
    } else {
      label = this.getLabelByValue(props.children, value);
    }
    return label;
  },

  getVLForOnChange: function getVLForOnChange(vls) {
    if (vls !== undefined) {
      return (0, _util.isMultipleOrTags)(this.props) ? vls : vls[0];
    }
    return vls;
  },

  getLabelByValue: function getLabelByValue(children, value) {
    var _this3 = this;

    return value.map(function (v) {
      var label = _this3.getLabelBySingleValue(children, v);
      if (label === null) {
        return v;
      }
      return label;
    });
  },

  getDropdownDOMNode: function getDropdownDOMNode() {
    return _react2['default'].findDOMNode(this.dropdownInstance);
  },

  getDropdownContainer: function getDropdownContainer() {
    if (!this.dropdownContainer) {
      this.dropdownContainer = document.createElement('div');
      document.body.appendChild(this.dropdownContainer);
    }
    return this.dropdownContainer;
  },

  getSearchPlaceholderElement: function getSearchPlaceholderElement(hidden) {
    var props = this.props;
    if (props.searchPlaceholder) {
      return _react2['default'].createElement(
        'span',
        {
          style: { display: hidden ? 'none' : 'block' },
          onClick: this.onPlaceholderClick,
          className: props.prefixCls + '-search__field__placeholder' },
        props.searchPlaceholder
      );
    }
    return null;
  },

  getInputElement: function getInputElement() {
    var props = this.props;
    return _react2['default'].createElement(
      'span',
      { className: props.prefixCls + '-search__field__wrap' },
      _react2['default'].createElement('input', { ref: this.saveInputRef,
        onChange: this.onInputChange,
        onKeyDown: this.onInputKeyDown,
        value: this.state.inputValue,
        disabled: props.disabled,
        className: props.prefixCls + '-search__field',
        role: 'textbox' }),
      (0, _util.isMultipleOrTags)(props) ? null : this.getSearchPlaceholderElement(!!this.state.inputValue)
    );
  },

  getDropdownElement: function getDropdownElement() {
    var state = this.state;
    var props = this.props;
    return _react2['default'].createElement(
      _Dropdown2['default'],
      {
        key: 'dropdown',
        transitionName: this.getDropdownTransitionName(),
        visible: state.open,
        getAlignTarget: this.getDOMNode,
        onDropdownFocus: this.onFocus,
        onDropdownBlur: this.onBlur,
        filterOption: props.filterOption,
        optionFilterProp: props.optionFilterProp,
        optionLabelProp: props.optionLabelProp,
        inputValue: state.inputValue,
        inputElement: this.getInputElement(),
        ref: this.saveDropdownRef,
        tags: props.tags,
        notFoundContent: props.notFoundContent,
        onMenuDeselect: this.onMenuDeselect,
        onMenuSelect: this.onMenuSelect,
        value: state.value,
        isMultipleOrTags: (0, _util.isMultipleOrTags)(props),
        prefixCls: props.prefixCls,
        isMultipleOrTagsOrCombobox: (0, _util.isMultipleOrTagsOrCombobox)(props),
        showSearch: props.showSearch,
        className: props.dropdownClassName,
        dropdownMenuStyle: props.dropdownMenuStyle,
        dropdownStyle: props.dropdownStyle },
      props.children
    );
  },

  getDropdownTransitionName: function getDropdownTransitionName() {
    var props = this.props;
    var transitionName = props.transitionName;
    if (!transitionName && props.animation) {
      transitionName = props.prefixCls + '-dropdown-' + props.animation;
    }
    return transitionName;
  },

  getInputDOMNode: function getInputDOMNode() {
    return _react2['default'].findDOMNode(this.inputInstance);
  },

  renderTopControlNode: function renderTopControlNode() {
    var _this4 = this;

    var value = this.state.value;
    var label = this.state.label;
    var props = this.props;
    var prefixCls = props.prefixCls;
    var allowClear = props.allowClear;
    var clear = _react2['default'].createElement('span', { key: 'clear',
      className: prefixCls + '-selection__clear',
      onClick: this.onClearSelection });
    // single and not combobox, input is inside dropdown
    if ((0, _util.isSingleMode)(props)) {
      var placeholder = _react2['default'].createElement(
        'span',
        { key: 'placeholder', className: prefixCls + '-selection__placeholder' },
        props.placeholder
      );
      var innerNode = placeholder;
      if (this.state.label[0]) {
        innerNode = _react2['default'].createElement(
          'span',
          { key: 'value' },
          this.state.label[0]
        );
      }
      return _react2['default'].createElement(
        'span',
        { className: prefixCls + '-selection__rendered' },
        [innerNode, allowClear ? clear : null]
      );
    }

    var selectedValueNodes = undefined;
    if ((0, _util.isMultipleOrTags)(props)) {
      selectedValueNodes = value.map(function (v, index) {
        var content = label[index];
        var title = content;
        var maxTagTextLength = props.maxTagTextLength;
        if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
          content = content.slice(0, maxTagTextLength) + '...';
        }
        return _react2['default'].createElement(
          'li',
          { className: prefixCls + '-selection__choice',
            key: v,
            title: title },
          _react2['default'].createElement(
            'span',
            { className: prefixCls + '-selection__choice__content' },
            content
          ),
          _react2['default'].createElement('span', { className: prefixCls + '-selection__choice__remove',
            onClick: _this4.removeSelected.bind(_this4, v) })
        );
      });
    }
    return _react2['default'].createElement(
      'ul',
      { className: prefixCls + '-selection__rendered' },
      selectedValueNodes,
      allowClear && !(0, _util.isMultipleOrTags)(props) ? clear : null,
      _react2['default'].createElement(
        'li',
        { className: prefixCls + '-search ' + prefixCls + '-search--inline' },
        this.getInputElement()
      )
    );
  },

  render: function render() {
    var _rootCls;

    var props = this.props;
    var multiple = (0, _util.isMultipleOrTags)(props);
    var state = this.state;
    var prefixCls = props.prefixCls;
    var ctrlNode = this.renderTopControlNode();
    var extraSelectionProps = {};
    if (!(0, _util.isCombobox)(props)) {
      extraSelectionProps = {
        onKeyDown: this.onKeyDown,
        tabIndex: 0
      };
    }
    var rootCls = (_rootCls = {}, _defineProperty(_rootCls, props.className, !!props.className), _defineProperty(_rootCls, prefixCls, 1), _defineProperty(_rootCls, prefixCls + '-open', this.state.open), _defineProperty(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), _defineProperty(_rootCls, prefixCls + '-disabled', props.disabled), _rootCls);
    this.haveOpened = this.haveOpened || state.open;
    return _react2['default'].createElement(
      'span',
      {
        style: props.style,
        className: (0, _rcUtil.classSet)(rootCls),
        onFocus: this.onFocus,
        onBlur: this.onBlur },
      _react2['default'].createElement(
        'span',
        _extends({ ref: 'selection',
          key: 'selection',
          className: prefixCls + '-selection ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
          role: 'combobox',
          'aria-autocomplete': 'list',
          onClick: this.onClick,
          'aria-haspopup': 'true',
          'aria-expanded': state.open
        }, extraSelectionProps),
        ctrlNode,
        multiple || !props.showArrow ? null : _react2['default'].createElement(
          'span',
          { key: 'arrow', className: prefixCls + '-arrow', tabIndex: '-1', style: { outline: 'none' } },
          _react2['default'].createElement('b', null)
        ),
        multiple ? this.getSearchPlaceholderElement(!!this.state.inputValue || this.state.value.length) : null
      )
    );
  },

  removeSelected: function removeSelected(selectedValue) {
    var props = this.props;
    if (props.disabled) {
      return;
    }
    var label = this.state.label.concat();
    var index = this.state.value.indexOf(selectedValue);
    var value = this.state.value.filter(function (v) {
      return v !== selectedValue;
    });
    if (index !== -1) {
      label.splice(index, 1);
    }
    var canMultiple = (0, _util.isMultipleOrTags)(props);
    if (canMultiple) {
      props.onDeselect(selectedValue);
    }
    this.fireChange(value, label);
  },

  setOpenState: function setOpenState(open) {
    var _this5 = this;

    var refs = this.refs;
    this.setState({
      open: open
    }, function () {
      if (open || (0, _util.isMultipleOrTagsOrCombobox)(_this5.props)) {
        if (_this5.getInputDOMNode()) {
          _this5.getInputDOMNode().focus();
        }
      } else if (refs.selection) {
        _react2['default'].findDOMNode(refs.selection).focus();
      }
    });
  },

  openIfHasChildren: function openIfHasChildren() {
    var props = this.props;
    if (_react2['default'].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
      this.setOpenState(true);
    }
  },

  fireChange: function fireChange(value, label) {
    var props = this.props;
    if (!('value' in props)) {
      this.setState({
        value: value, label: label
      });
    }
    props.onChange(this.getVLForOnChange(value), this.getVLForOnChange(label));
  }
});

exports['default'] = Select;
module.exports = exports['default'];