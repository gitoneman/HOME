'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TableRow = require('./TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

var Table = _react2['default'].createClass({
  displayName: 'Table',

  propTypes: {
    data: _react2['default'].PropTypes.array,
    expandIconAsCell: _react2['default'].PropTypes.bool,
    useFixedHeader: _react2['default'].PropTypes.bool,
    columns: _react2['default'].PropTypes.array,
    prefixCls: _react2['default'].PropTypes.string,
    bodyStyle: _react2['default'].PropTypes.object,
    style: _react2['default'].PropTypes.object,
    rowKey: _react2['default'].PropTypes.func,
    rowClassName: _react2['default'].PropTypes.func,
    expandedRowClassName: _react2['default'].PropTypes.func,
    childrenColumnName: _react2['default'].PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      data: [],
      useFixedHeader: false,
      expandIconAsCell: false,
      columns: [],
      rowKey: function rowKey(o) {
        return o.key;
      },
      rowClassName: function rowClassName() {
        return '';
      },
      expandedRowClassName: function expandedRowClassName() {
        return '';
      },
      prefixCls: 'rc-table',
      bodyStyle: {},
      style: {},
      childrenColumnName: 'children'
    };
  },

  getInitialState: function getInitialState() {
    return {
      expandedRows: [],
      data: this.props.data.concat()
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if ('data' in nextProps) {
      this.setState({
        data: nextProps.data.concat()
      });
    }
  },

  onExpanded: function onExpanded(expanded, record) {
    var expandedRows = this.state.expandedRows.concat();
    var info = expandedRows.filter(function (i) {
      return i.record === record;
    });
    if (info.length) {
      info[0].expanded = expanded;
    } else {
      expandedRows.push({ record: record, expanded: expanded });
    }
    this.setState({
      expandedRows: expandedRows
    });
  },

  onRowDestroy: function onRowDestroy(record) {
    var expandedRows = this.state.expandedRows;
    var index = -1;
    expandedRows.forEach(function (r, i) {
      if (r === record) {
        index = i;
      }
    });
    if (index !== -1) {
      expandedRows.splice(index, 1);
    }
  },

  getThs: function getThs() {
    var ths = [];
    if (this.props.expandIconAsCell) {
      ths.push({
        key: 'rc-table-expandIconAsCell',
        className: this.props.prefixCls + '-expand-icon-th',
        title: ''
      });
    }
    ths = ths.concat(this.props.columns);
    return ths.map(function (c) {
      if (c.colSpan !== 0) {
        return _react2['default'].createElement(
          'th',
          { key: c.key, colSpan: c.colSpan, className: c.className || '' },
          c.title
        );
      }
    });
  },

  getExpandedRow: function getExpandedRow(key2, content, visible, className) {
    var key = key2;
    var prefixCls = this.props.prefixCls;
    if (key) {
      key += '-extra-row';
    }
    return _react2['default'].createElement(
      'tr',
      { key: key, style: { display: visible ? '' : 'none' }, className: prefixCls + '-expanded-row ' + className },
      this.props.expandIconAsCell ? _react2['default'].createElement('td', { key: 'rc-table-expand-icon-placeholder' }) : '',
      _react2['default'].createElement(
        'td',
        { colSpan: this.props.columns.length },
        content
      )
    );
  },

  getRowsByData: function getRowsByData(data, visible) {
    var props = this.props;
    var columns = props.columns;
    var childrenColumnName = props.childrenColumnName;
    var expandedRowRender = props.expandedRowRender;
    var expandIconAsCell = props.expandIconAsCell;
    var rst = [];
    var keyFn = props.rowKey;
    var rowClassName = props.rowClassName;
    var expandedRowClassName = props.expandedRowClassName;
    for (var i = 0; i < data.length; i++) {
      var record = data[i];
      var key = keyFn ? keyFn(record, i) : undefined;
      var childrenColumn = record[childrenColumnName];
      var isRowExpanded = this.isRowExpanded(record);
      var expandedRowContent = undefined;
      if (expandedRowRender) {
        expandedRowContent = expandedRowRender(record, i);
      }
      var className = rowClassName(record, i);
      rst.push(_react2['default'].createElement(_TableRow2['default'], {
        className: className,
        record: record,
        expandIconAsCell: expandIconAsCell,
        onDestroy: this.onRowDestroy,
        index: i,
        visible: visible,
        onExpand: this.onExpanded,
        expandable: childrenColumn || expandedRowContent,
        expanded: isRowExpanded,
        prefixCls: props.prefixCls + '-row',
        childrenColumnName: childrenColumnName,
        columns: columns,
        key: key }));

      var subVisible = visible && isRowExpanded;

      if (expandedRowContent && isRowExpanded) {
        rst.push(this.getExpandedRow(key, expandedRowContent, subVisible, expandedRowClassName(record, i)));
      }
      if (childrenColumn) {
        rst = rst.concat(this.getRowsByData(childrenColumn, subVisible));
      }
    }
    return rst;
  },

  getRows: function getRows() {
    return this.getRowsByData(this.state.data, true);
  },

  getColGroup: function getColGroup() {
    var cols = [];
    if (this.props.expandIconAsCell) {
      cols.push(_react2['default'].createElement('col', { className: this.props.prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));
    }
    cols = cols.concat(this.props.columns.map(function (c) {
      return _react2['default'].createElement('col', { key: c.key, style: { width: c.width } });
    }));
    return _react2['default'].createElement(
      'colgroup',
      null,
      cols
    );
  },

  isRowExpanded: function isRowExpanded(record) {
    var info = this.state.expandedRows.filter(function (i) {
      return i.record === record;
    });
    return info[0] && info[0].expanded;
  },

  render: function render() {
    var props = this.props;
    var prefixCls = props.prefixCls;
    var columns = this.getThs();
    var rows = this.getRows();
    var className = props.prefixCls;
    if (props.className) {
      className += ' ' + props.className;
    }
    var headerTable = undefined;
    var thead = _react2['default'].createElement(
      'thead',
      { className: prefixCls + '-thead' },
      _react2['default'].createElement(
        'tr',
        null,
        columns
      )
    );
    if (props.useFixedHeader) {
      headerTable = _react2['default'].createElement(
        'div',
        { className: prefixCls + '-header' },
        _react2['default'].createElement(
          'table',
          null,
          this.getColGroup(),
          thead
        )
      );
      thead = null;
    }
    return _react2['default'].createElement(
      'div',
      { className: className, style: props.style },
      headerTable,
      _react2['default'].createElement(
        'div',
        { className: prefixCls + '-body', style: props.bodyStyle },
        _react2['default'].createElement(
          'table',
          null,
          this.getColGroup(),
          thead,
          _react2['default'].createElement(
            'tbody',
            { className: prefixCls + '-tbody' },
            rows
          )
        )
      )
    );
  }
});

exports['default'] = Table;
module.exports = exports['default'];