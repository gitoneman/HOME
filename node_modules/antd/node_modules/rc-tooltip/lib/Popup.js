'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _utils = require('./utils');

var _rcAlign = require('rc-align');

var _rcAlign2 = _interopRequireDefault(_rcAlign);

var _rcAnimate = require('rc-animate');

var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var Popup = _react2['default'].createClass({
  displayName: 'Popup',

  propTypes: {
    visible: _react.PropTypes.bool,
    wrap: _react.PropTypes.object,
    style: _react.PropTypes.object,
    onMouseEnter: _react.PropTypes.func,
    className: _react.PropTypes.string,
    onMouseLeave: _react.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      className: ''
    };
  },

  componentDidMount: function componentDidMount() {
    this.rootNode = this.getPopupDomNode();
  },

  // optimize for speed
  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return this.props.visible || nextProps.visible;
  },

  onAlign: function onAlign(popupDomNode, align) {
    var props = this.props;
    var placement = undefined;
    var placementProp = this.currentPlacement || props.placement;
    if (placementProp.points) {
      placement = align;
    } else if (typeof placementProp === 'string') {
      placement = (0, _utils.fromPointsToPlacement)(align);
    }
    if (placement !== placementProp) {
      this.currentPlacement = placement;
      popupDomNode.className = this.getClassName(placement);
    }
  },

  getPopupDomNode: function getPopupDomNode() {
    return _reactDom2['default'].findDOMNode(this);
  },

  getTarget: function getTarget() {
    return _reactDom2['default'].findDOMNode(this.props.wrap).firstChild;
  },

  getTransitionName: function getTransitionName() {
    var props = this.props;
    var transitionName = props.transitionName;
    if (!transitionName && props.animation) {
      transitionName = props.prefixCls + '-' + props.animation;
    }
    return transitionName;
  },

  getClassName: function getClassName(placement) {
    var props = this.props;
    var prefixCls = props.prefixCls;

    var className = props.className + ' ';
    className += (0, _utils.getToolTipClassByPlacement)(prefixCls, placement || props.placement);
    var hiddenClass = prefixCls + '-hidden';
    if (!props.visible) {
      className += ' ' + hiddenClass;
    }
    return className;
  },

  render: function render() {
    var props = this.props;
    var prefixCls = props.prefixCls;
    var placement = props.placement;
    var style = props.style;

    var className = this.getClassName(this.currentPlacement);
    if (!props.visible) {
      this.currentPlacement = null;
    }
    var arrowClassName = prefixCls + '-arrow';
    var innerClassname = prefixCls + '-inner';
    var align = undefined;
    if (placement && placement.points) {
      align = placement;
    } else {
      align = (0, _utils.fromPlacementStrToAlign)(placement);
      var _align = align;
      var offset = _align.offset;
      var targetOffset = _align.targetOffset;

      var offsetProp = props.align.offset;
      var targetOffsetProp = props.align.targetOffset;
      if (offsetProp) {
        offsetProp = offsetProp.concat();
      }
      if (targetOffsetProp) {
        targetOffsetProp = targetOffsetProp.concat();
      }
      var updateAlign = {};
      for (var index = 0; index < 2; index++) {
        if (offsetProp) {
          if (offsetProp[index] === undefined) {
            offsetProp[index] = offset[index];
          }
          updateAlign.offset = offsetProp;
        }
        if (targetOffsetProp) {
          if (targetOffsetProp[index] === undefined) {
            targetOffsetProp[index] = targetOffset[index];
          }
          updateAlign.targetOffset = offsetProp;
        }
      }
      align = (0, _objectAssign2['default'])({}, align, updateAlign);
    }
    return _react2['default'].createElement(
      _rcAnimate2['default'],
      { component: '',
        exclusive: true,
        transitionAppear: true,
        transitionName: this.getTransitionName(),
        showProp: 'data-visible' },
      _react2['default'].createElement(
        _rcAlign2['default'],
        { target: this.getTarget,
          key: 'popup',
          monitorWindowResize: true,
          'data-visible': props.visible,
          disabled: !props.visible,
          align: align,
          onAlign: this.onAlign },
        _react2['default'].createElement(
          'div',
          { className: className,
            onMouseEnter: props.onMouseEnter,
            onMouseLeave: props.onMouseLeave,
            style: style },
          _react2['default'].createElement('div', { className: arrowClassName }),
          _react2['default'].createElement(
            'div',
            { className: innerClassname },
            props.children
          )
        )
      )
    );
  }
});

exports['default'] = Popup;
module.exports = exports['default'];