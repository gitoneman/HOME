'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getToolTipClassByAlign = getToolTipClassByAlign;
exports.getToolTipClassByPlacement = getToolTipClassByPlacement;
exports.fromPlacementStrToAlign = fromPlacementStrToAlign;
exports.fromPointsToPlacement = fromPointsToPlacement;

function getToolTipClassByAlign(prefixCls, placement) {
  var offset = placement.offset || [0, 0];
  var offsetClass = '';
  if (offset && offset.length) {
    offsetClass = prefixCls + '-placement-offset-x-' + offset[0] + ' ' + prefixCls + '-placement-offset-y-' + offset[1];
  }
  var points = placement.points;
  return prefixCls + ' ' + offsetClass + ' ' + prefixCls + '-placement-points-' + points[0] + '-' + points[1];
}

function getToolTipClassByPlacement(prefixCls, placement) {
  if (typeof placement === 'string') {
    return prefixCls + ' ' + prefixCls + '-placement-' + placement;
  }
  return getToolTipClassByAlign(prefixCls, placement);
}

var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};

var targetOffset = [0, 0];

var placementAlignMap = {
  left: {
    points: ['cr', 'cl'],
    overflow: autoAdjustOverflow,
    offset: [-3, 0],
    targetOffset: targetOffset
  },
  right: {
    points: ['cl', 'cr'],
    overflow: autoAdjustOverflow,
    offset: [3, 0],
    targetOffset: targetOffset
  },
  top: {
    points: ['bc', 'tc'],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset: targetOffset
  },
  bottom: {
    points: ['tc', 'bc'],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset: targetOffset
  },
  topLeft: {
    points: ['bl', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset: targetOffset
  },
  topRight: {
    points: ['br', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset: targetOffset
  },
  bottomRight: {
    points: ['tr', 'br'],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset: targetOffset
  },
  bottomLeft: {
    points: ['tl', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset: targetOffset
  }
};

exports.placementAlignMap = placementAlignMap;
function isPointsEq(a1, a2) {
  return a1[0] === a2[0] && a1[1] === a2[1];
}

function fromPlacementStrToAlign(placementStr) {
  return placementAlignMap[placementStr];
}

function fromPointsToPlacement(align) {
  var points = align.points;
  for (var placement in placementAlignMap) {
    if (placementAlignMap.hasOwnProperty(placement)) {
      if (isPointsEq(placementAlignMap[placement].points, points)) {
        return placement;
      }
    }
  }
  throw new Error('can not find placement for', points);
}